name: "Prepare Configuration"
description: "Prepare Configuration"

inputs:
  github_token: 
    descriptions: "GitHub PAT"
    required: true
  gitops_token:
    descriptions: "GitOps Repository PAT"
    required: true
  gitops_app_name: 
    descriptions: "GitOps Application Name as home directory name that manage configution"
    required: false
    default: default  
  sourcecode_home_path: 
    descriptions: "Source Code Home Path"
    required: false
    default: project_src
  pom_line_number: 
    descriptions: "Line no. of version record at pom.xml"
    required: false
    default: 13
  java_version: 
    descriptions: "Java Version"
    required: false
    default: 11    
    
#outputs:
#  pom_app_version:
#    description: "version number from pom.xml"
#    value: ${{ steps.pom_dat.outputs.version }}
#  pom_app_name:
#    description: "version number from pom.xml"
#    value: ${{ steps.pom_dat.outputs.name }}
    
runs:
  using: "composite"
  steps:

    - run: echo "STEP_NAME=Checkout Source Code" >> $GITHUB_ENV
      shell: bash

    - run: echo "STEP_NAME_TEST=Checkout Source Code" >> $GITHUB_ENV
      shell: bash
      
    - name: Checkout Source Code
      uses: actions/checkout@v2.4.0
      with:
        ref: ${{ env.sourcecode_manage_branch }}
        path: ${{ inputs.sourcecode_home_path }}

    - run: echo "STEP_NAME=Set up JDK ${{inputs.java_version}}" >> $GITHUB_ENV
      shell: bash

    - name: Set up JDK ${{inputs.java_version}}
      uses: actions/setup-java@v2
      with:
        java-version: ${{inputs.java_version}}
        distribution: 'adopt'

    #- name: Checkout Source Code
    #  run: |
    #      git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
    #      cd ${{ inputs.sourcecode_home_path }}
    #      git switch ${{ env.SOURCECODE_MANAGE_BRANCH }}

    - run: echo "STEP_NAME=Get version" >> $GITHUB_ENV
      shell: bash

    - name: Get version
      #id: pom_dat
    #- if: '${{inputs.java_version}}' == '11'
      shell: bash
      run: |
          echo "Get version"
          cd ${{ inputs.sourcecode_home_path }}
          if [[ "${{inputs.java_version}}" == "11" ]] 
          then
            echo "Get Version for Java 11"
            POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            POM_NAME=$(mvn help:evaluate -Dexpression=project.name -q -DforceStdout)
            echo "POM_APP_VERSION=$POM_VERSION" > ../pom_data.txt
            echo "POM_APP_NAME=$POM_NAME" >> ../pom_data.txt            
          else
            echo "Get Version for Java 8"
            pwd
            ls -l            
            #POM_VERSION=$(head -${{ inputs.pom_line_number }} pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
            POM_VERSION=$(head -13 pom.xml|tail -1|grep -oPm1 "(?<=<version>)[^<]+")
            #pom_name_line_number=$(echo ${{ inputs.pom_line_number }})
            #((pom_name_line_number=pom_name_line_number+1))
            POM_NAME=$(head -14 pom.xml|tail -1|grep -oPm1 "(?<=<name>)[^<]+")
            echo "POM_APP_VERSION=$POM_VERSION" > ../pom_data.txt
            echo "POM_APP_NAME=$POM_NAME" >> ../pom_data.txt            
          fi
          #echo "::set-output name=version::$POM_VERSION"
          #echo "::set-output name=name::$POM_NAME"
          cat ../pom_data.txt

    - run: echo "STEP_NAME=Generate new version" >> $GITHUB_ENV
      shell: bash

    - name: Generate new version
      shell: bash
      run: |
          echo "Generate new version"
          cat pom_data.txt
          pom_app_name=$(cat pom_data.txt|grep '^POM_APP_NAME'|awk -F'=' '{print($2)}' )
          pom_version=$(cat pom_data.txt|grep '^POM_APP_VERSION'|awk -F'=' '{print($2)}' )
          echo "pom_version=${pom_version}"
          major_version=$(echo ${pom_version}|awk -F'.' '{print($1)}')
          minor_version=$(echo ${pom_version}|awk -F'.' '{print($2)}')
          cur_build_version=$(echo ${pom_version}|awk -F'.' '{print($3)}')
          ((cur_build_version=cur_build_version+0))
          ((new_build_version=cur_build_version+1))
          
          
          pom_new_version="${major_version}.${minor_version}.${new_build_version}"
          mkdir -p version
          echo "BUILD_VERSION=${new_build_version}" > version/version_control.txt
          echo "POM_VERSION=${pom_new_version}" >> version/version_control.txt
          echo "APP_NAME=${pom_app_name}" >> version/version_control.txt
          echo "IMAGE_VERSION=${pom_new_version}" >> version/version_control.txt
          sed -i ${{ inputs.pom_line_number }}"s/<version>${pom_version}<\/version>/<version>${pom_new_version}<\/version>/" ${{ inputs.sourcecode_home_path }}/pom.xml
          cp ${{ inputs.sourcecode_home_path }}/pom.xml version/
          echo "APP_NAME=${pom_app_name}" >> $GITHUB_ENV
          echo "POM_VERSION=${pom_new_version}" >> $GITHUB_ENV
          echo "IMAGE_VERSION=${pom_new_version}" >> $GITHUB_ENV  
          
    - run: echo "STEP_NAME=Checkout GitOps Repo" >> $GITHUB_ENV
      shell: bash

    - name: Checkout GitOps Repo
      uses: actions/checkout@v2.4.0
      with:
        repository: ${{ env.gitops_repo }}
        ref: ${{ env.gitops_manage_branch }}
        token: ${{ inputs.gitops_token }}
        path: manage_gitops
        
    - run: echo "STEP_NAME=Update gitops configuration" >> $GITHUB_ENV
      shell: bash
      
    - name: Update gitops configuration
      shell: bash
      run: |           
          cd manage_gitops/${{ env.APP_NAME }}
          image_repo=$(cat values.yaml|grep image|awk -F' ' '{print($2)}')
          acr_val=$(echo $image_repo|awk -F'/' '{print($1)}')
          image_val=$(echo $image_repo|awk -F'/' '{print($2)}')
          image_name=$(echo $image_val|awk -F':' '{print($1)}')
          image_tag=$(echo $image_val|awk -F':' '{print($2)}')
          echo "acr_val=${acr_val}"
          echo "image_val=${image_val}"
          echo "image_name=${image_name}"
          echo "image_tag=${image_tag}"
          new_image_val="${{ env.APP_NAME }}:${{ env.IMAGE_VERSION }}"
          new_acr_val="${{ env.acr_registry_server }}"
          sed -i "s/${image_val}/${new_image_val}/g" values.yaml
          sed -i "s/${acr_val}/${new_acr_val}/g" values.yaml
          cp values.yaml ../../version/

    - run: echo "STEP_NAME=Upload version artifact" >> $GITHUB_ENV
      shell: bash
      
    - name: Upload version artifact
      uses: actions/upload-artifact@v1
      with:
         name: version
         path: version
         #path: version_control.txt
         
    - name: "Failure Notification" 
      uses: e-saving/birdtest-template-cicd/Dev/NotificationAction@main
      if: ${{ failure() }}
      with:
        github_token: ${{ inputs.github_token }}
        notify_mesg: "Prepare Configuration Failure at step ${{ env.STEP_NAME }}"
          
