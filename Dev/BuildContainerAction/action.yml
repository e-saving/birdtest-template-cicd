name: "Build Container"
description: "Build Container"

inputs:
  gitops_repo:
    descriptions: "GitOps Repository in GitHub"
    required: false
    default: 'e-saving/gitops_deployment'
  gitops_manage_branch:
    descriptions: "GitOps Repository Branch"
    required: false
    default: 'master'
  gitops_token:
    descriptions: "GitOps Repository PAT"
    required: true    
  gitops_app_name: 
    descriptions: "GitOps Application Name as home directory name that manage configution"
    required: false
    default: default
  sourcecode_manage_branch: 
    descriptions: "Project source code repository branch"
    required: false
    default: develop
  github_token: 
    descriptions: "GitHub PAT"
    required: true    
    
#outputs:
#  pom_app_version:
#    description: "version number from pom.xml"
#    value: ${{ steps.pom_dat.outputs.version }}
#  pom_app_name:
#    description: "version number from pom.xml"
#    value: ${{ steps.pom_dat.outputs.name }}
    
runs:
  using: "composite"
  steps:
    - name: Checkout Source Code
      uses: actions/checkout@v2.4.0
      with:        
        ref: ${{ inputs.sourcecode_manage_branch }}
        path: project_src
        
    #- name: Checkout Source Code
    #  run: |
    #      git clone https://${{ secrets.GITLAB_USERNAME }}:${{ secrets.GITLAB_TOKEN }}@${{ env.GITLAB_REPO }}
    #      cd ${{ env.SOURCECODE_HOME_PATH }}
    #      git switch ${{ env.SOURCECODE_MANAGE_BRANCH }}
        
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Download version artifact
      uses: actions/download-artifact@v1
      with:
        name: version

    - name: Check version number
      shell: bash
      run: |
        img_version=$(cat version/version_control.txt|grep '^IMAGE_VERSION'|awk -F'=' '{print($2)}')
        echo "img_version is ${img_version}"
        #echo "IMAGE_VERSION=${img_version} " >> $GITHUB_ENV
        
    - name: Build and Unit Testing with Maven
      shell: bash
      run: |
          cd project_src
          if [[ -d badges ]]
          then
            rm -Rf badges
          fi
          ls -l badges
          mkdir -p badges
          #mvn package -Pcoverage
          mvn package            
          ls -l badges/
          ls -l target/
          ls -l target/site/jacoco/
            
    - name: Generate Unit Test Result (JaCoCo)
      uses: cicirello/jacoco-badge-generator@v2
      with:
        badges-directory: project_src/badges
        jacoco-csv-file: project_src/target/site/jacoco/jacoco.csv
        generate-branches-badge: true
        generate-summary: true
           
    - name: Upload Unit Test Coverage Report (JaCoCo)
      uses: actions/upload-artifact@v2
      with:
        name: unit-test-report
        path: project_src/target/site/jacoco/
